# Testing Standards

Standards for writing tests in Go using only the standard library testing package.

<rule>
name: testing_standards
description: Standards for writing tests using only the Go standard library testing package

filters:
  # Match Go test files
  - type: file_extension
    pattern: "_test\\.go$"
  # Match import statements in test files
  - type: content
    pattern: "^\\s*import\\s*\\("

actions:
  - type: suggest
    message: |
      When writing Go tests:

      1. Use only the standard library testing package:
         ```go
         import (
             "testing"
             "net/http/httptest"  // For HTTP testing
             "context"
             "time"
         )
         ```

      2. DO NOT use external testing frameworks:
         - No testify
         - No gomega
         - No ginkgo
         - No gocheck
         - No any other third-party testing frameworks

      3. Use standard library testing patterns:
         ```go
         func TestSomething(t *testing.T) {
             // Arrange
             expected := "expected"
             input := "input"

             // Act
             result, err := SomeFunction(input)

             // Assert
             if err != nil {
                 t.Errorf("unexpected error: %v", err)
             }
             if result != expected {
                 t.Errorf("got %q, want %q", result, expected)
             }
         }
         ```

      4. For table-driven tests:
         ```go
         func TestSomething(t *testing.T) {
             tests := []struct {
                 name     string
                 input    string
                 want     string
                 wantErr  bool
             }{
                 {
                     name:    "valid case",
                     input:   "valid",
                     want:    "expected",
                     wantErr: false,
                 },
                 // More test cases...
             }

             for _, tt := range tests {
                 t.Run(tt.name, func(t *testing.T) {
                     got, err := SomeFunction(tt.input)
                     if (err != nil) != tt.wantErr {
                         t.Errorf("unexpected error: %v", err)
                     }
                     if got != tt.want {
                         t.Errorf("got %q, want %q", got, tt.want)
                     }
                 })
             }
         }
         ```

      5. For HTTP testing, use httptest package:
         ```go
         func TestHTTPHandler(t *testing.T) {
             req := httptest.NewRequest("GET", "/test", nil)
             w := httptest.NewRecorder()
             handler := http.HandlerFunc(YourHandler)
             handler.ServeHTTP(w, req)

             if w.Code != http.StatusOK {
                 t.Errorf("got status %d, want %d", w.Code, http.StatusOK)
             }
         }
         ```

examples:
  - input: |
      # Bad: Using external testing framework
      import (
          "github.com/stretchr/testify/assert"
          "testing"
      )

      func TestFunction(t *testing.T) {
          result := SomeFunction()
          assert.Equal(t, "expected", result)
      }

      # Good: Using standard library
      import "testing"

      func TestFunction(t *testing.T) {
          result := SomeFunction()
          if result != "expected" {
              t.Errorf("got %q, want %q", result, "expected")
          }
      }
    output: "Using standard library testing package"

metadata:
  priority: high
  version: 1.0
</rule> 